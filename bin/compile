#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e # fail fast

# parse params
BUILD_DIR=$1
CACHE_DIR=$2
BUILDPACK_DIR=$(cd $(dirname $0)/..; pwd)

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function vendor() {
  binary="$1"
  path="$2"

  echo "Fetching $binary" | indent
  mkdir -p $path
  curl $binary -s -o - | tar xz -C $path -f -

  [ -d "$path/bin" ] && export PATH=$path/bin:$PATH
  export CPPPATH="$path/include:$CPPPATH"
  export CPATH="$path/include:$CPATH"
  export LIBRARY_PATH="$path/lib:$LIBRARY_PATH"
  export LD_LIBRARY_PATH="$path/lib:$LD_LIBRARY_PATH"

  true
}

echo "-----> Vendoring binaries"
vendor "https://wildnote-vendor-binaries.s3-us-west-1.amazonaws.com/gdal-fgdb.tar.gz" "$BUILD_DIR/vendor"

echo "-----> Configuring build environment"

cat <<EOF > $BUILDPACK_DIR/export
export PATH="\$PATH:$PATH"
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH"
export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH"
export CPPPATH="\$CPPPATH:$CPPPATH"
export CPATH="\$CPATH:$CPATH"
EOF

echo "-----> Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d

cat <<EOF > $BUILD_DIR/.profile.d/gdal.sh
export PATH="\$PATH:${PATH//$BUILD_DIR//app}"
export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:${LD_LIBRARY_PATH//$BUILD_DIR//app}"
export LIBRARY_PATH="\$LIBRARY_PATH:${LIBRARY_PATH//$BUILD_DIR//app}"
export CPPPATH="\$CPPPATH:${CPPPATH//$BUILD_DIR//app}"
export CPATH="\$CPATH:${CPATH//$BUILD_DIR//app}"
EOF